package {{.Domain}}_handler

import (
	"net/http"
	"strconv"

	"{{.GoMod}}/errors"
	"{{.GoMod}}/responses"
	{{.Domain}}_models "{{.GoMod}}/{{.Domain}}/models"
	{{.Domain}}_service "{{.GoMod}}/{{.Domain}}/service"
	{{.Domain}}_storage "{{.GoMod}}/{{.Domain}}/storage"
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

type {{.Domain}}Handler struct {
	{{.CapitalizedDomain}}Service {{.Domain}}_service.Service
}

func New{{.CapitalizedDomain}}Handler(db *gorm.DB) *{{.Domain}}Handler {
	{{.Domain}}Storage := {{.Domain}}_storage.New{{.CapitalizedDomain}}Storage(db)
	{{.Domain}}Service := {{.Domain}}_service.New{{.CapitalizedDomain}}Service({{.Domain}}Storage)
	return &{{.Domain}}Handler{
		{{.CapitalizedDomain}}Service: {{.Domain}}Service,
	}
}

func (handler *{{.Domain}}Handler) Get{{.CapitalizedDomain}}s(c *gin.Context) {
	{{.Domain}}s, err := handler.{{.CapitalizedDomain}}Service.Get{{.CapitalizedDomain}}s()
	if err != nil {
		c.Error(err)
		return
	}

	response := responses.NewHttpResponse(http.StatusOK, {{.Domain}}s)

	c.JSON(http.StatusOK, response)
}

func (handler *{{.Domain}}Handler) Create{{.CapitalizedDomain}}(c *gin.Context) {
	var {{.Domain}} {{.Domain}}_models.{{.CapitalizedDomain}}

	err := c.BindJSON(&{{.Domain}})
	if err != nil {
		http_error := errors.NewHttpError("Object is malformed", http.StatusBadRequest)
		c.Error(http_error)
		return
	}

	err = handler.{{.CapitalizedDomain}}Service.Create{{.CapitalizedDomain}}(&{{.Domain}})
	if err != nil {
		c.Error(err)
		return
	}

	c.JSON(http.StatusCreated, nil)
}

func (handler *{{.Domain}}Handler) Update{{.CapitalizedDomain}}(c *gin.Context) {
	var {{.Domain}} {{.Domain}}_models.{{.CapitalizedDomain}}

	err := c.BindJSON(&{{.Domain}})
	if err != nil {
		http_error := errors.NewHttpError("Object is malformed", http.StatusBadRequest)
		c.Error(http_error)
		return
	}

	err = handler.{{.CapitalizedDomain}}Service.Update{{.CapitalizedDomain}}(&{{.Domain}})
	if err != nil {
		c.Error(err)
		return
	}

	c.JSON(http.StatusNoContent, nil)
}

func (handler *{{.Domain}}Handler) Get{{.CapitalizedDomain}}ById(c *gin.Context) {
	idStr := c.Param("id")
	id, conversionErr := strconv.Atoi(idStr)
	if conversionErr != nil {
		http_error := errors.NewHttpError("path param malformed", http.StatusBadRequest)
		c.Error(http_error)
		return
	}

	{{.Domain}}, err := handler.{{.CapitalizedDomain}}Service.Get{{.CapitalizedDomain}}ById(id)
	if err != nil {
		c.Error(err)
		return
	}

	response := responses.NewHttpResponse(http.StatusOK, {{.Domain}})
	c.JSON(http.StatusOK, response)
}

func (handler *{{.Domain}}Handler) Delete{{.CapitalizedDomain}}(c *gin.Context) {
	idStr := c.Param("id")
	id, conversionErr := strconv.Atoi(idStr)
	if conversionErr != nil {
		http_error := errors.NewHttpError("path param malformed", http.StatusBadRequest)
		c.Error(http_error)
		return
	}

	err := handler.{{.CapitalizedDomain}}Service.Delete{{.CapitalizedDomain}}(id)
	if err != nil {
		c.Error(err)
		return
	}

	c.JSON(http.StatusOK, nil)
}

func (handler *{{.Domain}}Handler) SetupRouter(r *gin.Engine) *gin.Engine {
	r.GET("/{{.Domain}}s", handler.Get{{.CapitalizedDomain}}s)
	r.POST("/{{.Domain}}s", handler.Create{{.CapitalizedDomain}})
	r.GET("/{{.Domain}}s/:id", handler.Get{{.CapitalizedDomain}}ById)
	r.PUT("/{{.Domain}}s/:id", handler.Update{{.CapitalizedDomain}})
	r.DELETE("/{{.Domain}}s/:id", handler.Delete{{.CapitalizedDomain}})

	return r
}
